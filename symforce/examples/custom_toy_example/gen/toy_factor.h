// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace toy_example {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: toy_residual
 *
 * Args:
 *     x: Scalar
 *     b: Scalar
 *     buffer: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     jacobian: (1x1) jacobian of res wrt arg x (1)
 *     hessian: (1x1) Gauss-Newton hessian for arg x (1)
 *     rhs: (1x1) Gauss-Newton rhs for arg x (1)
 */
template <typename Scalar>
void ToyFactor(const Scalar x, const Scalar b, const Scalar* const buffer,
               Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
               Eigen::Matrix<Scalar, 1, 1>* const jacobian = nullptr,
               Eigen::Matrix<Scalar, 1, 1>* const hessian = nullptr,
               Eigen::Matrix<Scalar, 1, 1>* const rhs = nullptr) {
  // Total ops: 6

  // Input arrays

  // Intermediate terms (1)
  const Scalar _tmp0 = std::floor(-b + x);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) =
        5 * buffer[static_cast<size_t>(_tmp0)] + 3 * buffer[static_cast<size_t>(_tmp0 + 1)];
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _jacobian = (*jacobian);

    _jacobian.setZero();
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _hessian = (*hessian);

    _hessian.setZero();
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _rhs = (*rhs);

    _rhs.setZero();
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace toy_example
